/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.AddressBook;
import io.swagger.model.Entry;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-07-08T23:51:07.282Z")

@Validated
@Api(value = "addressbooks", description = "the addressbooks API")
@RequestMapping(value = "")
public interface AddressbooksApi {

    @ApiOperation(value = "Create a AddressBook", nickname = "createAddressBook", notes = "Creates a new instance of a `AddressBook`.", response = AddressBook.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = AddressBook.class) })
    @RequestMapping(value = "/addressbooks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AddressBook> createAddressBook(@ApiParam(value = "A new `AddressBook` to be created." ,required=true )  @Valid @RequestBody AddressBook body);


    @ApiOperation(value = "Create a Entry", nickname = "createEntry", notes = "Creates a new instance of a `Entry`.", response = Entry.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = Entry.class),
        @ApiResponse(code = 404, message = "Address book not found") })
    @RequestMapping(value = "/addressbooks/{addressbookId}/entries",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Entry> createEntry(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId,@ApiParam(value = "A new `Entry` to be created." ,required=true )  @Valid @RequestBody Entry body);


    @ApiOperation(value = "Delete a AddressBook", nickname = "deleteAddressBook", notes = "Deletes an existing `AddressBook`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response."),
        @ApiResponse(code = 404, message = "Addressbook ID not found") })
    @RequestMapping(value = "/addressbooks/{addressbookId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAddressBook(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId);


    @ApiOperation(value = "Delete a Entry", nickname = "deleteEntry", notes = "Deletes an existing `Entry`.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful response."),
        @ApiResponse(code = 404, message = "Entry ID or Addressbook ID not found") })
    @RequestMapping(value = "/addressbooks/{addressbookId}/entries/{entryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEntry(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId,@ApiParam(value = "A unique identifier for a `Entry`.",required=true) @PathVariable("entryId") Integer entryId);


    @ApiOperation(value = "Get a AddressBook", nickname = "getAddressBook", notes = "Gets the details of a single instance of a `AddressBook`.", response = AddressBook.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `AddressBook`.", response = AddressBook.class),
        @ApiResponse(code = 404, message = "Address book not found", response = AddressBook.class) })
    @RequestMapping(value = "/addressbooks/{addressbookId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AddressBook> getAddressBook(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId);


    @ApiOperation(value = "List all entries in an addressbook", nickname = "getEntries", notes = "Gets a list of all `Entry` entities.", response = Entry.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `Entry` entities.", response = Entry.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Address book not found", response = Entry.class, responseContainer = "List") })
    @RequestMapping(value = "/addressbooks/{addressbookId}/entries",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Entry>> getEntries(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId);


    @ApiOperation(value = "Get a Entry", nickname = "getEntry", notes = "Gets the details of a single instance of a `Entry`.", response = Entry.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `Entry`.", response = Entry.class),
        @ApiResponse(code = 404, message = "Address book or entry not found", response = Entry.class) })
    @RequestMapping(value = "/addressbooks/{addressbookId}/entries/{entryId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Entry> getEntry(@ApiParam(value = "A unique identifier for a `AddressBook`.",required=true) @PathVariable("addressbookId") Integer addressbookId,@ApiParam(value = "A unique identifier for a `Entry`.",required=true) @PathVariable("entryId") Integer entryId);


    @ApiOperation(value = "List All addressbooks", nickname = "getaddressbooks", notes = "Gets a list of all `AddressBook` entities.", response = AddressBook.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns an array of `AddressBook` entities.", response = AddressBook.class, responseContainer = "List") })
    @RequestMapping(value = "/addressbooks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<AddressBook>> getaddressbooks();

}
